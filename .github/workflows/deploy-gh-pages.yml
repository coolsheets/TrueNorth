name: Deploy to GitHub Pages

on:
  workflow_dispatch:  # Manual triggering
  push:
    branches:
      - gh-pages

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Avoid running this workflow when the actor is the GitHub Actions bot
    if: github.actor != 'github-actions[bot]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            app/node_modules
            server/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json', 'app/package-lock.json', 'server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          
      - name: Install dependencies
        run: |
          # First install root dependencies (include dev deps so workspace dev deps are available)
          npm ci --include=dev
          # Then install app-specific dependencies (include dev deps so vite is available locally)
          cd app
          npm ci --include=dev
          # Also install server dependencies (include dev deps)
          cd ../server
          npm ci --include=dev
          
      - name: Build
        run: |
          set -e
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          echo "Environment vars relevant to Node/Vite"
          echo "PWD=$(pwd)"
          echo "BASE_URL=${BASE_URL:-$(node -e "console.log(process.env.BASE_URL||'unset')")}" || true
          echo "Installing root dependencies (including dev)"
          npm ci --include=dev
          echo "Root node_modules path contents (top-level)"
          ls -la node_modules || true
          echo "Check where vite is (npm ls vite)"
          npm ls vite --depth=0 || true
          echo "Attempt to resolve vite from node's resolver"
          node -e "try{console.log(require.resolve('vite'))}catch(e){console.error('resolve error:',e.message);process.exit(0)}"
          echo "Show app/package.json (for workspace config)"
          sed -n '1,200p' app/package.json || true
          echo "Running Vite build for app from repo root (outDir=./app/dist)"
          npx --yes vite build --root ./app --outDir ./app/dist
          echo "Listing app/dist contents"
          ls -la app/dist || true
          
      - name: Configure for GitHub Pages
        working-directory: ./app/dist
        run: |
          # Create a .nojekyll file to prevent Jekyll processing
          touch .nojekyll
          # Create a CNAME file if you have a custom domain
          # echo "yourdomain.com" > CNAME
          # Create a custom 404 page that redirects to index.html for SPA routing
          cp index.html 404.html

      - name: Verify build output
        run: |
          echo "Checking if dist directory exists..."
          if [ -d "app/dist" ]; then
            echo "✅ app/dist directory exists"
            ls -la app/dist
          else
            echo "❌ app/dist directory does not exist"
            exit 1
          fi
          
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: app/dist
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}  # Use the automatic token
          commit-message: "Deploy to GitHub Pages [skip ci]"
